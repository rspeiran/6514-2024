// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark driveRightMotorControler;
private Spark driveLeftMotorController;
private DifferentialDrive differentialDrive;
private Spark driveRightMotorControllerFollower;
private Spark driveLeftMotorControllerFollower;
private Encoder driveLeftQuadratureEncoder;
private Encoder driveRightQuadratureEncoder;
private AnalogGyro analogGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
driveRightMotorControler = new Spark(0);
 addChild("DriveRightMotorControler",driveRightMotorControler);
 driveRightMotorControler.setInverted(false);

driveLeftMotorController = new Spark(1);
 addChild("DriveLeftMotorController",driveLeftMotorController);
 driveLeftMotorController.setInverted(false);

differentialDrive = new DifferentialDrive(driveRightMotorControler, driveLeftMotorController);
 addChild("DifferentialDrive",differentialDrive);
 differentialDrive.setSafetyEnabled(false);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);


driveRightMotorControllerFollower = new Spark(2);
 addChild("DriveRightMotorControllerFollower",driveRightMotorControllerFollower);
 driveRightMotorControllerFollower.addFollower(driveRightMotorControllerFollower);
driveRightMotorControllerFollower.setInverted(false);

driveLeftMotorControllerFollower = new Spark(3);
 addChild("DriveLeftMotorControllerFollower",driveLeftMotorControllerFollower);
 driveLeftMotorController.addFollower(driveLeftMotorControllerFollower);
driveLeftMotorControllerFollower.setInverted(false);

driveLeftQuadratureEncoder = new Encoder(0, 1, false, EncodingType.k4X);
 addChild("DriveLeftQuadratureEncoder",driveLeftQuadratureEncoder);
 driveLeftQuadratureEncoder.setDistancePerPulse(1.0);

driveRightQuadratureEncoder = new Encoder(2, 3, false, EncodingType.k4X);
 addChild("DriveRightQuadratureEncoder",driveRightQuadratureEncoder);
 driveRightQuadratureEncoder.setDistancePerPulse(1.0);

analogGyro = new AnalogGyro(0);
 addChild("AnalogGyro",analogGyro);
 analogGyro.setSensitivity(0.007);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

